version: "3.8"

services:


  gunicorn:
    image: test:testim
    container_name: 'gunicorn'
    restart: always
    command: /bin/sh -c "python manage.py makemigrations --force-color --no-input -v 3
      && python manage.py makemigrations --merge --no-input -v 3
      && python manage.py migrate --force-color -v 3"
    networks:
      - backend
    volumes:
      - .:/app
    ports:
      - 8000:8000
  db:
    image: postgres:alpine
    ports:
      - 5432:5432
    restart: unless-stopped
    networks:
      - backend
    environment:
      - POSTGRES_USER=dinol
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=educationalDB

networks:
  backend:
    driver: bridge
#
#version: '3'
#
## хранилища
#volumes:
#    pgdata:
#        driver: local
#services:
#    nginx:
## при падении будет стараться подняться
#        restart: always
## только свежий nginx
#        image: nginx:latest
## слушает порт 8080
#        expose:
#          - 8080
## мапаем порт 80 на его 8080. Тогда сайт будет доступен по адресу localhost. Убедись, что порт у тебя не занят.
#        ports:
#          - "80:8080"
## монтируем только те директории, в которых лежит статика, т.к. nginx с динамикой не будет работать. Также директорию с логами и файл настройки, который мы подготовили.
#        volumes:
#            - ./mysite/static:/srv/www/mysite/static
#            - ./mysite/media:/srv/www/mysite/media
#            - ./mysite/logs:/srv/www/mysite/logs
#            - ./docker/nginx:/etc/nginx/conf.d
## и nginx зависит от контейнера python. Т.е. python должен быть запущен первым
#        depends_on:
#            - python
#    python:
#        restart: always
## указываем откуда собирать образ
#        build:
#            context: .
#            dockerfile: docker/python/Dockerfile
## монтируем директорию проекта
#        volumes:
#            - .mysite:/srv/www/mysite
#        expose:
#          - 8000
#        ports:
#            - 8000:8000
## запускаем gunicorn
#        command: "gunicorn -c gunicorn.py <project>.wsgi"
#    postgres:
## Ниже даже расписывать не хочу, насколько все просто: логин, пароль, БД, порты и т.д.
#        image: postgres:9.3.22
#        ports:
#            - 5432:5432
#        environment:
#            POSTGRES_USER: dinol
#            POSTGRES_PASSWORD: postgres
#            POSTGRES_DB: educationalDB
#            PGDATA: /var/lib/postgresql/data
#        volumes:
#            - pgdata:/var/lib/postgresql/data
